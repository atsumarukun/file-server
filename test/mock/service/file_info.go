// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/api/domain/service/file_info.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	entity "file-server/internal/app/api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockFileInfoService is a mock of FileInfoService interface.
type MockFileInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockFileInfoServiceMockRecorder
}

// MockFileInfoServiceMockRecorder is the mock recorder for MockFileInfoService.
type MockFileInfoServiceMockRecorder struct {
	mock *MockFileInfoService
}

// NewMockFileInfoService creates a new mock instance.
func NewMockFileInfoService(ctrl *gomock.Controller) *MockFileInfoService {
	mock := &MockFileInfoService{ctrl: ctrl}
	mock.recorder = &MockFileInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileInfoService) EXPECT() *MockFileInfoServiceMockRecorder {
	return m.recorder
}

// IsExists mocks base method.
func (m *MockFileInfoService) IsExists(arg0 *gorm.DB, arg1 *entity.FileInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExists indicates an expected call of IsExists.
func (mr *MockFileInfoServiceMockRecorder) IsExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExists", reflect.TypeOf((*MockFileInfoService)(nil).IsExists), arg0, arg1)
}
