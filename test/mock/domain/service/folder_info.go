// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/api/domain/service/folder_info.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	entity "file-server/internal/app/api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockFolderInfoService is a mock of FolderInfoService interface.
type MockFolderInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockFolderInfoServiceMockRecorder
}

// MockFolderInfoServiceMockRecorder is the mock recorder for MockFolderInfoService.
type MockFolderInfoServiceMockRecorder struct {
	mock *MockFolderInfoService
}

// NewMockFolderInfoService creates a new mock instance.
func NewMockFolderInfoService(ctrl *gomock.Controller) *MockFolderInfoService {
	mock := &MockFolderInfoService{ctrl: ctrl}
	mock.recorder = &MockFolderInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFolderInfoService) EXPECT() *MockFolderInfoServiceMockRecorder {
	return m.recorder
}

// IsExists mocks base method.
func (m *MockFolderInfoService) IsExists(arg0 *gorm.DB, arg1 *entity.FolderInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExists indicates an expected call of IsExists.
func (mr *MockFolderInfoServiceMockRecorder) IsExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExists", reflect.TypeOf((*MockFolderInfoService)(nil).IsExists), arg0, arg1)
}
