// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/api/domain/repository/folder_info.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "file-server/internal/app/api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockFolderInfoRepository is a mock of FolderInfoRepository interface.
type MockFolderInfoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFolderInfoRepositoryMockRecorder
}

// MockFolderInfoRepositoryMockRecorder is the mock recorder for MockFolderInfoRepository.
type MockFolderInfoRepositoryMockRecorder struct {
	mock *MockFolderInfoRepository
}

// NewMockFolderInfoRepository creates a new mock instance.
func NewMockFolderInfoRepository(ctrl *gomock.Controller) *MockFolderInfoRepository {
	mock := &MockFolderInfoRepository{ctrl: ctrl}
	mock.recorder = &MockFolderInfoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFolderInfoRepository) EXPECT() *MockFolderInfoRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFolderInfoRepository) Create(arg0 *gorm.DB, arg1 *entity.FolderInfo) (*entity.FolderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*entity.FolderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFolderInfoRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFolderInfoRepository)(nil).Create), arg0, arg1)
}

// FindOneByID mocks base method.
func (m *MockFolderInfoRepository) FindOneByID(arg0 *gorm.DB, arg1 uint64) (*entity.FolderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.FolderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByID indicates an expected call of FindOneByID.
func (mr *MockFolderInfoRepositoryMockRecorder) FindOneByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByID", reflect.TypeOf((*MockFolderInfoRepository)(nil).FindOneByID), arg0, arg1)
}

// FindOneByIDAndIsHideWithLower mocks base method.
func (m *MockFolderInfoRepository) FindOneByIDAndIsHideWithLower(arg0 *gorm.DB, arg1 uint64, arg2 bool) (*entity.FolderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByIDAndIsHideWithLower", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.FolderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByIDAndIsHideWithLower indicates an expected call of FindOneByIDAndIsHideWithLower.
func (mr *MockFolderInfoRepositoryMockRecorder) FindOneByIDAndIsHideWithLower(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByIDAndIsHideWithLower", reflect.TypeOf((*MockFolderInfoRepository)(nil).FindOneByIDAndIsHideWithLower), arg0, arg1, arg2)
}

// FindOneByIDWithLower mocks base method.
func (m *MockFolderInfoRepository) FindOneByIDWithLower(arg0 *gorm.DB, arg1 uint64) (*entity.FolderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByIDWithLower", arg0, arg1)
	ret0, _ := ret[0].(*entity.FolderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByIDWithLower indicates an expected call of FindOneByIDWithLower.
func (mr *MockFolderInfoRepositoryMockRecorder) FindOneByIDWithLower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByIDWithLower", reflect.TypeOf((*MockFolderInfoRepository)(nil).FindOneByIDWithLower), arg0, arg1)
}

// FindOneByPath mocks base method.
func (m *MockFolderInfoRepository) FindOneByPath(arg0 *gorm.DB, arg1 string) (*entity.FolderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByPath", arg0, arg1)
	ret0, _ := ret[0].(*entity.FolderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByPath indicates an expected call of FindOneByPath.
func (mr *MockFolderInfoRepositoryMockRecorder) FindOneByPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByPath", reflect.TypeOf((*MockFolderInfoRepository)(nil).FindOneByPath), arg0, arg1)
}

// FindOneByPathAndIsHideWithChildren mocks base method.
func (m *MockFolderInfoRepository) FindOneByPathAndIsHideWithChildren(arg0 *gorm.DB, arg1 string, arg2 bool) (*entity.FolderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByPathAndIsHideWithChildren", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.FolderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByPathAndIsHideWithChildren indicates an expected call of FindOneByPathAndIsHideWithChildren.
func (mr *MockFolderInfoRepositoryMockRecorder) FindOneByPathAndIsHideWithChildren(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByPathAndIsHideWithChildren", reflect.TypeOf((*MockFolderInfoRepository)(nil).FindOneByPathAndIsHideWithChildren), arg0, arg1, arg2)
}

// FindOneByPathWithChildren mocks base method.
func (m *MockFolderInfoRepository) FindOneByPathWithChildren(arg0 *gorm.DB, arg1 string) (*entity.FolderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByPathWithChildren", arg0, arg1)
	ret0, _ := ret[0].(*entity.FolderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByPathWithChildren indicates an expected call of FindOneByPathWithChildren.
func (mr *MockFolderInfoRepositoryMockRecorder) FindOneByPathWithChildren(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByPathWithChildren", reflect.TypeOf((*MockFolderInfoRepository)(nil).FindOneByPathWithChildren), arg0, arg1)
}

// Remove mocks base method.
func (m *MockFolderInfoRepository) Remove(arg0 *gorm.DB, arg1 *entity.FolderInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFolderInfoRepositoryMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFolderInfoRepository)(nil).Remove), arg0, arg1)
}

// Update mocks base method.
func (m *MockFolderInfoRepository) Update(arg0 *gorm.DB, arg1 *entity.FolderInfo) (*entity.FolderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*entity.FolderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFolderInfoRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFolderInfoRepository)(nil).Update), arg0, arg1)
}
