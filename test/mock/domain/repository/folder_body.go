// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/api/domain/repository/folder_body.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "file-server/internal/app/api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFolderBodyRepository is a mock of FolderBodyRepository interface.
type MockFolderBodyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFolderBodyRepositoryMockRecorder
}

// MockFolderBodyRepositoryMockRecorder is the mock recorder for MockFolderBodyRepository.
type MockFolderBodyRepositoryMockRecorder struct {
	mock *MockFolderBodyRepository
}

// NewMockFolderBodyRepository creates a new mock instance.
func NewMockFolderBodyRepository(ctrl *gomock.Controller) *MockFolderBodyRepository {
	mock := &MockFolderBodyRepository{ctrl: ctrl}
	mock.recorder = &MockFolderBodyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFolderBodyRepository) EXPECT() *MockFolderBodyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFolderBodyRepository) Create(arg0 *entity.FolderBody) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFolderBodyRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFolderBodyRepository)(nil).Create), arg0)
}

// Read mocks base method.
func (m *MockFolderBodyRepository) Read(arg0 string) (*entity.FolderBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(*entity.FolderBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFolderBodyRepositoryMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFolderBodyRepository)(nil).Read), arg0)
}

// Remove mocks base method.
func (m *MockFolderBodyRepository) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFolderBodyRepositoryMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFolderBodyRepository)(nil).Remove), arg0)
}

// Update mocks base method.
func (m *MockFolderBodyRepository) Update(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFolderBodyRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFolderBodyRepository)(nil).Update), arg0, arg1)
}
