// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/api/domain/repository/file_info.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "file-server/internal/app/api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockFileInfoRepository is a mock of FileInfoRepository interface.
type MockFileInfoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileInfoRepositoryMockRecorder
}

// MockFileInfoRepositoryMockRecorder is the mock recorder for MockFileInfoRepository.
type MockFileInfoRepositoryMockRecorder struct {
	mock *MockFileInfoRepository
}

// NewMockFileInfoRepository creates a new mock instance.
func NewMockFileInfoRepository(ctrl *gomock.Controller) *MockFileInfoRepository {
	mock := &MockFileInfoRepository{ctrl: ctrl}
	mock.recorder = &MockFileInfoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileInfoRepository) EXPECT() *MockFileInfoRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFileInfoRepository) Create(arg0 *gorm.DB, arg1 *entity.FileInfo) (*entity.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*entity.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFileInfoRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileInfoRepository)(nil).Create), arg0, arg1)
}

// Creates mocks base method.
func (m *MockFileInfoRepository) Creates(arg0 *gorm.DB, arg1 []entity.FileInfo) ([]entity.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Creates", arg0, arg1)
	ret0, _ := ret[0].([]entity.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Creates indicates an expected call of Creates.
func (mr *MockFileInfoRepositoryMockRecorder) Creates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Creates", reflect.TypeOf((*MockFileInfoRepository)(nil).Creates), arg0, arg1)
}

// FindOneByID mocks base method.
func (m *MockFileInfoRepository) FindOneByID(arg0 *gorm.DB, arg1 uint64) (*entity.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByID indicates an expected call of FindOneByID.
func (mr *MockFileInfoRepositoryMockRecorder) FindOneByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByID", reflect.TypeOf((*MockFileInfoRepository)(nil).FindOneByID), arg0, arg1)
}

// FindOneByIDAndIsHide mocks base method.
func (m *MockFileInfoRepository) FindOneByIDAndIsHide(arg0 *gorm.DB, arg1 uint64, arg2 bool) (*entity.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByIDAndIsHide", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByIDAndIsHide indicates an expected call of FindOneByIDAndIsHide.
func (mr *MockFileInfoRepositoryMockRecorder) FindOneByIDAndIsHide(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByIDAndIsHide", reflect.TypeOf((*MockFileInfoRepository)(nil).FindOneByIDAndIsHide), arg0, arg1, arg2)
}

// FindOneByPath mocks base method.
func (m *MockFileInfoRepository) FindOneByPath(arg0 *gorm.DB, arg1 string) (*entity.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByPath", arg0, arg1)
	ret0, _ := ret[0].(*entity.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByPath indicates an expected call of FindOneByPath.
func (mr *MockFileInfoRepositoryMockRecorder) FindOneByPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByPath", reflect.TypeOf((*MockFileInfoRepository)(nil).FindOneByPath), arg0, arg1)
}

// Remove mocks base method.
func (m *MockFileInfoRepository) Remove(arg0 *gorm.DB, arg1 *entity.FileInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFileInfoRepositoryMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFileInfoRepository)(nil).Remove), arg0, arg1)
}

// Update mocks base method.
func (m *MockFileInfoRepository) Update(arg0 *gorm.DB, arg1 *entity.FileInfo) (*entity.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*entity.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFileInfoRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFileInfoRepository)(nil).Update), arg0, arg1)
}
