// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/api/domain/repository/file_body.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "file-server/internal/app/api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileBodyRepository is a mock of FileBodyRepository interface.
type MockFileBodyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileBodyRepositoryMockRecorder
}

// MockFileBodyRepositoryMockRecorder is the mock recorder for MockFileBodyRepository.
type MockFileBodyRepositoryMockRecorder struct {
	mock *MockFileBodyRepository
}

// NewMockFileBodyRepository creates a new mock instance.
func NewMockFileBodyRepository(ctrl *gomock.Controller) *MockFileBodyRepository {
	mock := &MockFileBodyRepository{ctrl: ctrl}
	mock.recorder = &MockFileBodyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileBodyRepository) EXPECT() *MockFileBodyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFileBodyRepository) Create(arg0 *entity.FileBody) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFileBodyRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileBodyRepository)(nil).Create), arg0)
}

// Read mocks base method.
func (m *MockFileBodyRepository) Read(arg0 string) (*entity.FileBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(*entity.FileBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileBodyRepositoryMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFileBodyRepository)(nil).Read), arg0)
}

// Remove mocks base method.
func (m *MockFileBodyRepository) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFileBodyRepositoryMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFileBodyRepository)(nil).Remove), arg0)
}

// Update mocks base method.
func (m *MockFileBodyRepository) Update(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFileBodyRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFileBodyRepository)(nil).Update), arg0, arg1)
}
