// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/api/usecase/file.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	dto "file-server/internal/app/api/usecase/dto"
	types "file-server/internal/pkg/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileUsecase is a mock of FileUsecase interface.
type MockFileUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockFileUsecaseMockRecorder
}

// MockFileUsecaseMockRecorder is the mock recorder for MockFileUsecase.
type MockFileUsecaseMockRecorder struct {
	mock *MockFileUsecase
}

// NewMockFileUsecase creates a new mock instance.
func NewMockFileUsecase(ctrl *gomock.Controller) *MockFileUsecase {
	mock := &MockFileUsecase{ctrl: ctrl}
	mock.recorder = &MockFileUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileUsecase) EXPECT() *MockFileUsecaseMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockFileUsecase) Copy(arg0, arg1 uint64, arg2 bool) (*dto.FileDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dto.FileDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Copy indicates an expected call of Copy.
func (mr *MockFileUsecaseMockRecorder) Copy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockFileUsecase)(nil).Copy), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockFileUsecase) Create(arg0 uint64, arg1 bool, arg2 []types.File) ([]dto.FileDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].([]dto.FileDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFileUsecaseMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileUsecase)(nil).Create), arg0, arg1, arg2)
}

// Move mocks base method.
func (m *MockFileUsecase) Move(arg0, arg1 uint64, arg2 bool) (*dto.FileDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dto.FileDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Move indicates an expected call of Move.
func (mr *MockFileUsecaseMockRecorder) Move(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockFileUsecase)(nil).Move), arg0, arg1, arg2)
}

// Remove mocks base method.
func (m *MockFileUsecase) Remove(arg0 uint64, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFileUsecaseMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFileUsecase)(nil).Remove), arg0, arg1)
}

// Update mocks base method.
func (m *MockFileUsecase) Update(arg0 uint64, arg1 string, arg2, arg3 bool) (*dto.FileDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*dto.FileDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFileUsecaseMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFileUsecase)(nil).Update), arg0, arg1, arg2, arg3)
}
